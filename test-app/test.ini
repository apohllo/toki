[input]
	token_type=t

[layer:dashes]
; dashes and ellipsis char (2026)
	class=split
	separators=\u2013\u2014\u2015\u2012\u2026,
	separator_token_type=p

[layer:brackets]
; brackets and quotes
	class=affix_split
	process_types=t
	prefix_chars=([{<«»‹›„“„‘"'`
	suffix_chars=)]}>«»‹›”’"'`
	prefix_token_type=p
	suffix_token_type=p

[layer:classify]
; PRL-u etc. -> th
; other regex classification
	class=regexp
	process_types=t
	type:th=\p{Uppercase}+-(?i:u|owi|em|ie|a|y|e|ach|om|ów|ami)
	type:n=[0-9]+
	type:n_f=[0-9]+,[0-9]+
	type:n_d=(((0[1-9]|[12][0-9]|3[01])[-/.](0[1-9]|1[012])[-/.]((1|2)\d)?\d\d)|((((1|2)\d)?\d\d\d\d)[-/.](0[1-9]|1[012])[-/.](0[1-9]|[12][0-9]|3[01])))
	type:n_t=(24(:|[.])00|([01]?[0-9]|2[0-3])(:|[.])[0-5][0-9])((:|[.])[0-5][0-9])?
	type:n_ip=([0-9]{1,3})(\.[0-9]{1,3}){3}
	type:tm=[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}
	type:tu=(([a-zA-Z]+)://)?(((\.?([a-zA-Z0-9-]+))+\.[a-zA-Z]{2,6})|((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))(:[0-9]{1,5})?(/[a-zA-Z0-9.,;\?|\'+&%\$#=~_-]+)*[/]?

[layer:hyphen]
; now get the remaining hyphens
	class=group_split
	process_types=t
	separators=\u002d\u2010
	separator_token_type=p

[layer:fullstop]
; capture remaining dots as potential full stops
; (assuming abbrevs have been recognised)
	class=split
	process_types=t th
	separators=.
	separator_token_type=p

[layer:abbrev]
; recognise abbrevs that don't appear in the end of sentence
	class=lexicon_caseless
	process_types=t
	token_type=a
	lexicon_file=inner_abbrevs.txt

[layers]
	layer=dashes
	layer=brackets
	layer=classify
	layer=hyphen
	layer=abbrev
	layer=fullstop

[debug]
	format=$orth/$type:$ws\n
